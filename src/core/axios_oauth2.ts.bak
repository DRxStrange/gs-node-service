import oauth from 'axios-oauth-client';
import tokenProvider from 'axios-token-interceptor';
import { urlResolve } from './utils';

export default function(instance, config) {
  let scopes = Array.isArray(config.scopes) ? config.scopes.join(','): config.scopes;
  let getToken;

  if (config.refresh_token) {
    getToken = oauth.client(instance, {
      url: urlResolve(config.base_url, config.refreshUrl),
      grant_type: 'refresh_token',
      client_id: config.client_id,
      client_secret: config.client_secret,
      refresh_token: config.refresh_token,
      scope: scopes,
      state: config.state,
    });
  }

  switch(config.grant_type) {
    case 'authorizationCode':
      getToken = oauth.client(instance, {
        url: urlResolve(config.base_url, config.tokenUrl),
        grant_type: 'authorization_code',
        client_id: config.client_id,
        client_secret: config.client_secret,
        redirect_uri: config.redirect_uri,
        code: config.code,
        scope: scopes,
        state: config.state,
      });
    break;

    case 'password':
      getToken = oauth.client(instance, {
        url: urlResolve(config.base_url, config.refreshUrl),
        grant_type: 'password',
        client_id: config.client_id,
        client_secret: config.client_secret,
        username: config.username,
        password: config.password,
        scope: scopes,
        state: config.state,
      });
    break;

    case 'clientCredentials':
      getToken = oauth.client(instance, {
        url: urlResolve(config.base_url, config.refreshUrl),
        grant_type: 'client_credentials',
        client_id: config.client_id,
        client_secret: config.client_secret,
        scope: scopes,
        state: config.state,
      });
    break;

    default:
      throw new Error('Unknown grant type');
  }

  instance.interceptors.request.use(
    oauth.interceptor(tokenProvider, getToken)
  );
}