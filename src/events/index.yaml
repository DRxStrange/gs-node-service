'/do_kyc/{bank_id}.http.get': # event id. Will include path params. For ex. com.abc.do_kyc/{bank_id}/process/{user_id}
  fn: com.pinelabs.lenders_integration.create_account_hdfc
  data: 
    examples: # <string, ExampleObject>
    schema:
      body: 
        description:
        required: # default value is false
        content:
          '{content_type}': # For ex. application/json application/xml
            schema: #json-schema object. 
            examples: # <string, ExampleObject>
              '{example_name}':
                summary:
                description:
                value: # anyGSCLoudEvent
                external_value:
            encoding:
      params: # can come from path, query, headers
        - name: bank_id
          in: path # same as open api spec: one of cookie, path, query, header
          required: true
          allow_empty_value: false
          description:
          schema:
          examples:
  responses: 
    '{status_code}':


# A note on components

# Components
# We use components like open api spec, to define the reusable components across the following categories
# These components are aimed to be reused across events, functions, datasources.
# For examples, schemas, responses, examples, parameters, requestBodies, headers, events, functions, datasources. There could be more types of components as per developer need, for any reusable piece of YAML
# ANY YAML file can have a components key. One can create and reference components in the same file or across files.
# https://davidgarcia.dev/posts/how-to-split-open-api-spec-into-multiple-files/
# One can use . .. # as per conventional usage.
# ./components/samples/sample1
# ../components/samples/sample1
# #/components/samples/sample1
## ABOUT $ref
# $ref: '#/components/schemas/Address'